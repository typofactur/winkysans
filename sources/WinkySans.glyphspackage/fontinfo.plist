{
.appVersion = "3340";
.formatVersion = 3;
axes = (
{
name = Weight;
tag = wght;
}
);
classes = (
{
automatic = 1;
code = "A Aacute Abreve Acaron Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE B C Cacute Ccaron Ccedilla Cdotaccent D Dcaron Dcroat Eth E Eacute Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek Etilde Schwa F G Gbreve Gcommaaccent Gdotaccent Gmacron H Hbar I IJ Iacute Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J Jacute K Kcommaaccent L Lacute Lcaron Lcommaaccent Ldot Lslash M N Nacute Ncaron Ncommaaccent Ntilde O Oacute Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron Rcommaaccent S Sacute Scaron Scedilla Scommaaccent Germandbls T Tcaron Tcedilla Tcommaaccent U Uacute Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Ytilde Z Zacute Zcaron Zdotaccent Saltillo Lcommaaccent.loclMAH Ncommaaccent.loclMAH A.salt B.salt D.salt H.salt I.salt";
name = Uppercase;
}
);
customParameters = (
{
name = fsType;
value = (
);
},
{
name = "Use Typo Metrics";
value = 1;
},
{
name = "Use Extension Kerning";
value = 1;
}
);
date = "2025-02-15 22:20:36 +0000";
familyName = "Winky Sans";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn MAH;
languagesystem latn CAT;
languagesystem latn NLD;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature sups;
feature ordn;
feature onum;
feature case;
feature salt;
";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_0;
script grek;
language dflt;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
";
disabled = 1;
tag = frac;
},
{
automatic = 1;
code = "lookup ccmp_DFLT_1 {
	@CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dieresiscomb dotaccentcomb gravecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	lookupflag UseMarkFilteringSet @CombiningTopAccents;
	sub j' @CombiningTopAccents by jdotless;
} ccmp_DFLT_1;

lookup ccmp_latn_1 {
	lookupflag 0;
	sub Ldot by L periodcentered.loclCAT.case;
	sub ldot by l periodcentered.loclCAT;
} ccmp_latn_1;

script latn;
lookup ccmp_latn_1;
";
tag = ccmp;
},
{
automatic = 1;
code = "script latn;
language AZE;
lookup locl_latn_0 {
	sub i by idotaccent;
} locl_latn_0;
language CRT;
lookup locl_latn_0;
language KAZ;
lookup locl_latn_0;
language TAT;
lookup locl_latn_0;
language TRK;
lookup locl_latn_0;

script latn;
language ROM;
lookup locl_latn_1 {
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
} locl_latn_1;
language MOL;
lookup locl_latn_1;

script latn;
language MAH;
lookup locl_latn_2 {
	sub Lcommaaccent by Lcommaaccent.loclMAH;
	sub Ncommaaccent by Ncommaaccent.loclMAH;
	sub lcommaaccent by lcommaaccent.loclMAH;
	sub ncommaaccent by ncommaaccent.loclMAH;
} locl_latn_2;

script latn;
language CAT;
lookup locl_latn_3 {
	sub l periodcentered' l by periodcentered.loclCAT;
	sub L periodcentered' L by periodcentered.loclCAT.case;
} locl_latn_3;

script latn;
language NLD;
lookup locl_latn_4 {
	sub iacute j' by jacute;
	sub Iacute J' by Jacute;
} locl_latn_4;
";
tag = locl;
},
{
automatic = 1;
code = "sub one by onesuperior;
sub two by twosuperior;
sub three by threesuperior;
";
tag = sups;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
";
tag = ordn;
},
{
automatic = 1;
code = "sub zero.lf by zero;
sub one.lf by one;
sub two.lf by two;
sub three.lf by three;
sub four.lf by four;
sub five.lf by five;
sub six.lf by six;
sub seven.lf by seven;
sub eight.lf by eight;
sub nine.lf by nine;
sub zero by zero.osf;
sub one by one.osf;
sub two by two.osf;
sub three by three.osf;
sub four by four.osf;
sub five by five.osf;
sub six by six.osf;
sub seven by seven.osf;
sub eight by eight.osf;
sub nine by nine.osf;
";
tag = onum;
},
{
automatic = 1;
code = "sub periodcentered.loclCAT by periodcentered.loclCAT.case;
sub zero by zero.lf;
sub one by one.lf;
sub two by two.lf;
sub three by three.lf;
sub four by four.lf;
sub five by five.lf;
sub six by six.lf;
sub seven by seven.lf;
sub eight by eight.lf;
sub nine by nine.lf;
sub zero.osf by zero.lf;
sub one.osf by one.lf;
sub two.osf by two.lf;
sub three.osf by three.lf;
sub four.osf by four.lf;
sub five.osf by five.lf;
sub six.osf by six.lf;
sub seven.osf by seven.lf;
sub eight.osf by eight.lf;
sub nine.osf by nine.lf;
";
tag = case;
},
{
automatic = 1;
code = "sub A by A.salt;
sub B by B.salt;
sub D by D.salt;
sub H by H.salt;
sub I by I.salt;
sub a by a.salt;
sub e by e.salt;
sub g by g.salt;
sub y by y.salt;
";
tag = salt;
},
{
code = "lookup uppercaseSharpS {
    sub @Uppercase @Uppercase germandbls' by Germandbls;
    sub germandbls' @Uppercase by Germandbls;
} uppercaseSharpS;";
disabled = 1;
tag = calt;
},
{
code = "sub zero by zero.lf;
sub one by one.lf;
sub two by two.lf;
sub three by three.lf;
sub four by four.lf;
sub five by five.lf;
sub six by six.lf;
sub seven by seven.lf;
sub eight by eight.lf;
sub nine by nine.lf;
sub zero.osf by zero.lf;
sub one.osf by one.lf;
sub two.osf by two.lf;
sub three.osf by three.lf;
sub four.osf by four.lf;
sub five.osf by five.lf;
sub six.osf by six.lf;
sub seven.osf by seven.lf;
sub eight.osf by eight.lf;
sub nine.osf by nine.lf;";
disabled = 1;
tag = lnum;
}
);
fontMaster = (
{
axesValues = (
300
);
customParameters = (
{
name = "Master Icon Glyph Name";
value = n;
},
{
name = typoAscender;
value = 1015;
},
{
name = typoDescender;
value = -315;
},
{
name = typoLineGap;
value = 0;
},
{
name = hheaAscender;
value = 1015;
},
{
name = hheaDescender;
value = -315;
},
{
name = hheaLineGap;
value = 0;
},
{
name = winAscent;
value = 1057;
},
{
name = winDescent;
value = 430;
}
);
iconName = Light;
id = m003;
metricValues = (
{
over = 7;
pos = 700;
},
{
over = 7;
pos = 667;
},
{
over = 7;
pos = 500;
},
{
over = -7;
},
{
over = -7;
pos = -200;
},
{
}
);
name = Light;
userData = {
GSCornerRadius = 7;
GSOffsetHorizontal = -10;
GSOffsetKeepCompatible = 1;
GSOffsetProportional = 1;
GSOffsetVertical = 8;
KernOnIndependentPairs = (
"dcaron b",
"dcaron f",
"dcaron h",
"dcaron t",
"lcaron t",
"lcaron l",
"lcaron k",
"lcaron h",
"lcaron i",
"lcaron j",
"lcaron f",
"lcaron b",
"dcaron l",
"dcaron k",
"dcaron j",
"dcaron i",
"tcaron b",
"tcaron f",
"tcaron h",
"tcaron i",
"tcaron j",
"tcaron k",
"tcaron l",
"tcaron t"
);
KernOnModels = (
"r period",
"P period",
"P comma",
"r comma",
"F J",
"P J",
"T r",
"T y",
"slash slash",
"Y d",
"L T",
"A V",
"Y comma",
"A quotedblright",
"hyphen T",
"endash T",
"emdash T",
"underscore T",
"y period",
"L y",
"L v",
"S T",
"F d",
"F o",
"l y",
"f period",
"y comma",
"V o",
"S period",
"A quotesingle",
"S w",
"Z w",
"p comma",
"o comma",
"s comma",
"E O",
"S quotesingle",
"p a",
"b lcaron",
"P S",
"quotedbl B",
"f quotesingle",
"f quotedbl",
"I N",
"L L"
);
};
visible = 1;
},
{
axesValues = (
400
);
customParameters = (
{
name = "Master Icon Glyph Name";
value = n;
},
{
name = typoAscender;
value = 1015;
},
{
name = typoDescender;
value = -315;
},
{
name = typoLineGap;
value = 0;
},
{
name = hheaAscender;
value = 1015;
},
{
name = hheaDescender;
value = -315;
},
{
name = hheaLineGap;
value = 0;
},
{
name = winAscent;
value = 1057;
},
{
name = winDescent;
value = 430;
}
);
id = m005;
metricValues = (
{
over = 10;
pos = 700;
},
{
over = 10;
pos = 667;
},
{
over = 10;
pos = 500;
},
{
over = -10;
},
{
over = -10;
pos = -200;
},
{
}
);
name = Regular;
userData = {
GSCornerRadius = 10;
GSOffsetHorizontal = -10;
GSOffsetKeepCompatible = 1;
GSOffsetProportional = 1;
GSOffsetVertical = 8;
KernOnIndependentPairs = (
"dcaron t",
"dcaron b",
"dcaron f",
"dcaron i",
"dcaron j",
"dcaron k",
"dcaron l",
"dcaron h",
"lcaron b",
"lcaron f",
"lcaron h",
"lcaron i",
"lcaron j",
"lcaron k",
"lcaron l",
"lcaron t",
"tcaron t",
"tcaron l",
"tcaron k",
"tcaron j",
"tcaron i",
"tcaron h",
"tcaron f",
"tcaron b"
);
KernOnModels = (
"r period",
"P period",
"P comma",
"r comma",
"r quoteright",
"r quotedblleft",
"F J",
"P J",
"T r",
"T y",
"slash slash",
"Y d",
"A V",
"Y comma",
"quotedbl M",
"hyphen T",
"endash T",
"F d",
"L v",
"S T",
"f period",
"f comma",
"t quotedbl",
"H quotesingle",
"p a",
"y comma",
"W d",
"S period",
"d hyphen",
"S w",
"s p",
"k m",
"n t",
"r y",
"s comma",
"E O",
"E x",
"i f",
"C H",
"f r",
"e colon",
"H i",
"P S",
"P quoteright",
"P quotedblleft",
"c t",
"E S",
"I N",
"L M",
"L A",
"L L"
);
};
visible = 1;
},
{
axesValues = (
900
);
customParameters = (
{
name = "Master Icon Glyph Name";
value = n;
},
{
name = typoAscender;
value = 1015;
},
{
name = typoDescender;
value = -315;
},
{
name = typoLineGap;
value = 0;
},
{
name = hheaAscender;
value = 1015;
},
{
name = hheaDescender;
value = -315;
},
{
name = hheaLineGap;
value = 0;
},
{
name = winAscent;
value = 1057;
},
{
name = winDescent;
value = 430;
}
);
id = m002;
metricValues = (
{
over = 25;
pos = 700;
},
{
over = 25;
pos = 667;
},
{
over = 25;
pos = 500;
},
{
over = -25;
},
{
over = -25;
pos = -200;
},
{
}
);
name = Black;
userData = {
GSCornerRadius = 25;
GSOffsetHorizontal = 50;
GSOffsetKeepCompatible = 1;
GSOffsetProportional = 1;
GSOffsetVertical = 0;
KernOnIndependentPairs = (
"s comma",
"s period",
"S comma",
"Y comma",
"f period",
"V V",
"S period",
"R period",
"R comma",
"f comma",
"r quoteleft",
"L L",
"i n",
"lcaron t",
"dcaron b",
"dcaron f",
"dcaron k",
"dcaron l",
"dcaron t",
"dcaron i",
"dcaron j",
"dcaron h",
"l lcaron",
"lcaron b",
"lcaron f",
"lcaron i",
"lcaron h",
"lcaron k",
"lcaron l",
"lcaron j",
"tcaron t",
"tcaron l",
"tcaron k",
"tcaron j",
"tcaron i",
"tcaron h",
"tcaron f",
"tcaron b"
);
KernOnModels = (
"r period",
"P period",
"P comma",
"T o",
"F J",
"quotedbl A",
"T r",
"L v",
"T y",
"slash slash",
"F A",
"Y d",
"A V",
"X v",
"parenleft O",
"l y",
"S T",
"r quoteright",
"V o",
"A quotesingle",
"S y",
"V d",
"r quotedblleft",
"S quotesingle",
"P quoteright",
"n t",
"t z",
"e t",
"f t",
"o comma",
"E O",
"c t",
"i f",
"t w",
"s p",
"p a",
"e colon",
"L A",
"Y O",
"H quotesingle",
"P quoteleft",
"P quotedblleft",
"parenleft I",
"z period",
"A period",
"C period",
"Q u",
"I C",
"I N",
"L I",
"g j"
);
};
visible = 1;
}
);
instances = (
{
axesValues = (
300
);
instanceInterpolations = {
m003 = 1;
};
name = Light;
weightClass = 300;
},
{
axesValues = (
400
);
instanceInterpolations = {
m005 = 1;
};
name = Regular;
},
{
axesValues = (
500
);
instanceInterpolations = {
m002 = 0.2;
m005 = 0.8;
};
name = Medium;
weightClass = 500;
},
{
axesValues = (
600
);
instanceInterpolations = {
m002 = 0.4;
m005 = 0.6;
};
name = SemiBold;
weightClass = 600;
},
{
axesValues = (
700
);
instanceInterpolations = {
m002 = 0.6;
m005 = 0.4;
};
isBold = 1;
linkStyle = Regular;
name = Bold;
weightClass = 700;
},
{
axesValues = (
800
);
instanceInterpolations = {
m002 = 0.8;
m005 = 0.2;
};
name = ExtraBold;
weightClass = 800;
},
{
axesValues = (
900
);
instanceInterpolations = {
m002 = 1;
};
name = Black;
weightClass = 900;
}
);
kerningLTR = {
m003 = {
"@MMK_L_KO_L" = {
periodcentered.loclCAT.case = -140;
};
A = {
V = -80;
quotedblright = -80;
quotesingle = -40;
};
E = {
O = -20;
};
F = {
J = -120;
d = -50;
o = -50;
};
I = {
N = 20;
};
L = {
L = 40;
T = -80;
v = -60;
y = -60;
};
P = {
J = -120;
S = 0;
comma = -140;
period = -140;
};
S = {
T = -60;
period = -40;
quotesingle = -20;
w = -30;
};
T = {
r = -100;
y = -100;
};
V = {
o = -40;
};
Y = {
comma = -80;
d = -90;
};
Z = {
w = -30;
};
b = {
lcaron = -7;
};
dcaron = {
b = 30;
f = 30;
h = 40;
i = 21;
j = 32;
k = 30;
l = 19;
t = 40;
};
emdash = {
T = -80;
};
endash = {
T = -80;
};
f = {
period = -40;
quotedbl = 20;
quotesingle = 20;
};
h = {
i = -23;
};
hyphen = {
T = -80;
};
i = {
j = -15;
};
j = {
k = -15;
};
k = {
l = -20;
lcaron = -20;
tcaron = -5;
};
l = {
t = -25;
y = -40;
};
lcaron = {
b = 0;
f = 0;
h = 10;
i = 0;
j = 0;
k = 0;
l = -10;
t = 0;
};
o = {
comma = -20;
};
p = {
a = -15;
comma = -20;
};
quotedbl = {
B = 15;
};
r = {
comma = -120;
period = -150;
};
s = {
comma = -20;
};
slash = {
slash = -100;
};
tcaron = {
b = 12;
f = 16;
h = 12;
i = 14;
j = 25;
k = 22;
l = 11;
t = 30;
u = -4;
};
u = {
k = -15;
};
underscore = {
T = -80;
};
y = {
comma = -40;
period = -76;
};
};
m005 = {
"@MMK_L_KO_L" = {
periodcentered.loclCAT.case = -125;
};
A = {
V = -80;
};
C = {
H = -10;
};
E = {
O = -20;
S = 10;
x = -15;
};
F = {
J = -120;
d = -70;
};
H = {
i = 0;
quotesingle = -42;
};
I = {
N = 20;
};
L = {
A = 30;
L = 40;
M = 20;
v = -60;
};
P = {
J = -120;
S = 0;
comma = -140;
period = -140;
quotedblleft = 0;
quoteright = 0;
};
S = {
T = -60;
period = -40;
w = -30;
};
T = {
r = -100;
y = -100;
};
W = {
d = -40;
};
Y = {
comma = -80;
d = -90;
};
c = {
t = 10;
};
d = {
hyphen = -35;
};
dcaron = {
b = 50;
f = 50;
h = 60;
i = 50;
j = 50;
k = 50;
l = 50;
t = 50;
};
e = {
colon = 0;
};
endash = {
T = -80;
};
f = {
comma = -50;
period = -50;
r = 0;
};
hyphen = {
T = -80;
};
i = {
f = -10;
};
k = {
lcaron = -30;
m = -25;
tcaron = -20;
};
lcaron = {
b = -33;
f = -9;
h = -20;
i = -30;
j = -10;
k = -10;
l = -10;
t = -8;
};
n = {
t = -20;
};
p = {
a = -40;
};
quotedbl = {
M = -80;
};
r = {
comma = -120;
period = -150;
quotedblleft = -120;
quoteright = -120;
y = -20;
};
s = {
comma = -20;
p = -29;
};
slash = {
slash = -100;
};
t = {
quotedbl = -49;
};
tcaron = {
b = 30;
f = 40;
h = 30;
i = 30;
j = 30;
k = 30;
l = 30;
t = 40;
};
y = {
comma = -40;
};
};
m002 = {
"@MMK_L_KO_L" = {
periodcentered.loclCAT.case = -225;
};
A = {
V = -70;
period = 10;
quotesingle = -40;
};
C = {
period = 10;
};
E = {
O = -10;
};
F = {
A = -90;
J = -120;
};
H = {
quotesingle = 0;
};
I = {
C = 20;
N = 20;
};
L = {
A = 0;
I = 20;
L = 0;
v = -100;
};
P = {
comma = -140;
period = -140;
quotedblleft = 0;
quoteleft = 0;
quoteright = -20;
};
Q = {
u = 15;
};
R = {
comma = -5;
period = -5;
};
S = {
T = -50;
comma = 0;
period = 0;
quotesingle = -20;
y = -30;
};
T = {
o = -120;
r = -100;
y = -100;
};
V = {
V = 60;
d = -30;
o = -40;
};
X = {
v = -60;
};
Y = {
O = 0;
comma = -100;
d = -80;
};
b = {
f = -6;
};
c = {
t = -5;
};
dcaron = {
b = 50;
f = 40;
h = 50;
i = 65;
j = 70;
k = 60;
l = 50;
t = 40;
};
e = {
colon = 0;
t = -10;
};
f = {
comma = -100;
h = -17;
period = -70;
t = -10;
};
g = {
j = 30;
};
h = {
i = -3;
};
i = {
f = 0;
j = -2;
n = -2;
};
j = {
k = -6;
};
k = {
j = -2;
l = -6;
lcaron = -6;
tcaron = -14;
};
l = {
lcaron = 0;
t = -35;
y = -50;
};
lcaron = {
b = 50;
f = 30;
h = 50;
i = 50;
j = 70;
k = 50;
l = 50;
t = 50;
};
n = {
t = -10;
};
o = {
comma = -10;
};
p = {
a = 0;
};
parenleft = {
I = 0;
O = -60;
};
quotedbl = {
A = -120;
};
r = {
period = -150;
quotedblleft = -20;
quoteleft = -20;
quoteright = -40;
};
s = {
comma = 0;
p = 0;
period = 0;
};
slash = {
slash = -100;
};
t = {
w = 0;
z = -10;
};
tcaron = {
b = 80;
f = 40;
h = 70;
i = 70;
j = 70;
k = 80;
l = 70;
t = 40;
};
z = {
period = 10;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
note = "Winky Sans wurde entwickelt aus der Aniva.
Der Regular-Schnitt (400) entspricht der Aniva Medium (500).

Eckenrundung 49 bei 100 Stammbreite, um zwei Punkte zu erhalten und Achse INKY mit weniger Rundung möglich zu machen.

Nach der Rundung wurden die Enden verdickt, um den Effekt von sich sammelder Tinte zu simulieren.
Die Kante wurden um 10 Einheiten nach außen verlegt und dann nach innen gewölbt.
Für mehr Schwere unteren Rundungen wurden um 10 Einheiten verdickt.
Die Rundungen an den Enden teilweise mehr gewölbt.
Leichte Unregelmäßigkeiten und Asymmetrien sind gewollt.


Name:
Winky Sans - to wink = zwinkern / ink = Tinte

Alternativen:
Aniva Ink
Aninka
Katinka / Catinca
Anico
Anke
Inka / Inko / Inke
Ginko
Blink
Conic Sans
Conni Sans
Cosmic Sans
Komisch Sans
Octopus
ups
blot = Klecks
inkblot = Tintenklecks
Ink Hand
Inky Sans
Calamari
Calmar Sans
Calmo Sans


Regular
- Außenecken abrunden 49
- Ankerpunkte ergänzen
- unten 10 nach außen
- Anker wieder nach innen für Innen-Wölbung
- Unregelmäßigkeiten
- Kopie
- Form vereinen
- Innen-Ecken abrunden 10

Black
- Verfetten 50
- Höhe anpassen -35
- Metrik aktualisieren
- Innen-Ecken abrunden 50

Thin
- Verfetten -10
- Höhe anpassen +7
- Metrik aktualisieren
- Innen-Ecken abrunden 7

";
properties = (
{
key = designers;
values = (
{
language = DEU;
value = "Simon Atzbach";
}
);
},
{
key = designerURL;
value = "https://typofactur.de";
},
{
key = licenses;
values = (
{
language = dflt;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org";
}
);
},
{
key = licenseURL;
value = "https://openfontlicense.org";
},
{
key = manufacturers;
values = (
{
language = DEU;
value = typofactur;
}
);
},
{
key = manufacturerURL;
value = "https://typofactur.de";
},
{
key = vendorID;
value = TYFA;
}
);
settings = {
disablesNiceNames = 1;
};
unitsPerEm = 1000;
userData = {
GSDimensionPlugin.Dimensions = {
"05E54F0F-8425-4B5B-B0EB-B578BBC85A7B" = {
HH = "150";
HV = "200";
OH = "150";
OV = "200";
nV = "200";
nd = "125";
oH = "125";
oV = "210";
tH = "125";
};
"481D16E4-1E98-4559-AE79-559AF135D401" = {
HH = "40";
HV = "50";
OH = "40";
OV = "50";
nV = "50";
nd = "40";
oH = "40";
oV = "50";
tH = "40";
};
m004 = {
HH = "35";
HV = "50";
OH = "25";
OV = "50";
nV = "50";
nd = "25";
oH = "25";
oV = "50";
tH = "25";
};
m005 = {
HH = "50";
HV = "100";
OH = "50";
OV = "100";
nV = "100";
oH = "50";
oV = "100";
tH = "50";
};
m006 = {
HH = "90";
HV = "200";
OH = "90";
OV = "200";
nV = "200";
nd = "75";
oH = "75";
oV = "200";
tH = "75";
};
m01 = {
HH = "80";
HV = "100";
OH = "80";
OV = "100";
nV = "100";
nd = "75";
oH = "75";
oV = "100";
tH = "70";
};
};
KernOnKerningWeightLimit = 36000;
KernOnRegenerateGroups = 1;
KernOnVersion = "1.33";
};
versionMajor = 1;
versionMinor = 205;
}
